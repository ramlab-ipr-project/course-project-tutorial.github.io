{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IPR - Course Project Tutorial: Notice : You are recommended to read the project description first to understand the general task before reading this tutorial. Also Notice : You are recommended to have some knowledges with ROS through the beginner level of ROS tutorial . We have also uploaded a python-ROS example on gaussian process to help you familiar with ROS. ex_gaussian_process","title":"IPR - Course Project Tutorial:"},{"location":"#ipr-course-project-tutorial","text":"Notice : You are recommended to read the project description first to understand the general task before reading this tutorial. Also Notice : You are recommended to have some knowledges with ROS through the beginner level of ROS tutorial . We have also uploaded a python-ROS example on gaussian process to help you familiar with ROS. ex_gaussian_process","title":"IPR - Course Project Tutorial:"},{"location":"report/","text":"Report Project Report Guide A report acts as papers in conferences for our course. So it must contains: Overview of your contribution Core algorithm/method/proposal Motivations/Applications for your work Conclusions/Limitations/Future work etc A general outline Temporarily no standard template for the report. If you want more detailed guides, you can contact with me through email TA Yuxuan, Liu . Here is a sample outline : Introduction/Overview Abstract for your work. Environment setup Including the platform we introduce in the tutorial, you need also make a simple illustration of libraries or external ROS packages you use, like openCV/gmap/AMCL, etc. System design and modules implement Notes: teams should show their contribution assignments here, i.e., who implements which parts. This is a important reference for me to grade you. Use several subsections to describe the function and implement for each module. I suggest each team member take his/her own part. If you're using latex, the documents can be joined together easily. Conclusion Which covers topics like motivations/applications/limitaions/future work, a multi-aspects discussion on your work. References Tutorials you follow, papers/books you read, for other people to follow your work. Expected report pages: No hard requirement. You only need to conclude your team contributions, with enough information.","title":"Report"},{"location":"report/#report","text":"","title":"Report"},{"location":"report/#project-report-guide","text":"A report acts as papers in conferences for our course. So it must contains: Overview of your contribution Core algorithm/method/proposal Motivations/Applications for your work Conclusions/Limitations/Future work etc","title":"Project Report Guide"},{"location":"report/#a-general-outline","text":"Temporarily no standard template for the report. If you want more detailed guides, you can contact with me through email TA Yuxuan, Liu . Here is a sample outline : Introduction/Overview Abstract for your work. Environment setup Including the platform we introduce in the tutorial, you need also make a simple illustration of libraries or external ROS packages you use, like openCV/gmap/AMCL, etc. System design and modules implement Notes: teams should show their contribution assignments here, i.e., who implements which parts. This is a important reference for me to grade you. Use several subsections to describe the function and implement for each module. I suggest each team member take his/her own part. If you're using latex, the documents can be joined together easily. Conclusion Which covers topics like motivations/applications/limitaions/future work, a multi-aspects discussion on your work. References Tutorials you follow, papers/books you read, for other people to follow your work.","title":"A general outline"},{"location":"report/#expected-report-pages","text":"No hard requirement. You only need to conclude your team contributions, with enough information.","title":"Expected report pages:"},{"location":"setup/","text":"Setup Enviroment The newest version of regarding softwares is recommended. ROS: Melodic V-REP: 3.6.2 PRO EDU :Please Select Pro EDU for your own ubuntu version Platform: Ubuntu 18.04 LTS The above environment was tested before. If you have any problems, please contact yliuhb@connect.ust.hk We personally tested the raw V-REP: 3.6.2 PRO EDU on ROS-Melodic/Ubuntu 18.04. This setup should also be fine with ROS-Kinetic/Ubuntu 16.04. Demo After configuring the environment, run roscore And in another terminal, run(under the unzipped VREP_ROOT) ./vrep.sh In V-REP, load the updated scene file env.ttt . After pressing the start button , you can use rostopic list to see the Topics of vrep. Topics we need: /vrep/camera_switch /vrep/cmd_vel /vrep/image /vrep/laser_switch /vrep/scan /tf Check the meta-info of a topic: rostopic info /vrep/cmd_vel For controling the Pioneer p3dx robot, type the following in terminal ## Translation rostopic pub -r 10 /vrep/cmd_vel geometry_msgs/Twist '{linear: {x: 1.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}' ## Rotation rostopic pub -r 10 /vrep/cmd_vel geometry_msgs/Twist '{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 1.0}}' where x in \"linear\" stands for the velocity of the robot (forward as positive), and z in \"angular\" for the rotation (counter clockwise observed from top as positive). Make sure you can receive lidar scanner output (/vrep/scan), camera output (/vrep/image) and the coordinate transform from base_link to camera_link/laser_link (/tf) on ROS side. You can verify these with ros commands/rviz or your own codes. Getting more familiar with ROS is part of the project, you could contact me for help while you are encouraged to solve them your own first.","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#enviroment","text":"The newest version of regarding softwares is recommended. ROS: Melodic V-REP: 3.6.2 PRO EDU :Please Select Pro EDU for your own ubuntu version Platform: Ubuntu 18.04 LTS The above environment was tested before. If you have any problems, please contact yliuhb@connect.ust.hk We personally tested the raw V-REP: 3.6.2 PRO EDU on ROS-Melodic/Ubuntu 18.04. This setup should also be fine with ROS-Kinetic/Ubuntu 16.04.","title":"Enviroment"},{"location":"setup/#demo","text":"After configuring the environment, run roscore And in another terminal, run(under the unzipped VREP_ROOT) ./vrep.sh In V-REP, load the updated scene file env.ttt . After pressing the start button , you can use rostopic list to see the Topics of vrep. Topics we need: /vrep/camera_switch /vrep/cmd_vel /vrep/image /vrep/laser_switch /vrep/scan /tf Check the meta-info of a topic: rostopic info /vrep/cmd_vel For controling the Pioneer p3dx robot, type the following in terminal ## Translation rostopic pub -r 10 /vrep/cmd_vel geometry_msgs/Twist '{linear: {x: 1.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}' ## Rotation rostopic pub -r 10 /vrep/cmd_vel geometry_msgs/Twist '{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 1.0}}' where x in \"linear\" stands for the velocity of the robot (forward as positive), and z in \"angular\" for the rotation (counter clockwise observed from top as positive). Make sure you can receive lidar scanner output (/vrep/scan), camera output (/vrep/image) and the coordinate transform from base_link to camera_link/laser_link (/tf) on ROS side. You can verify these with ros commands/rviz or your own codes. Getting more familiar with ROS is part of the project, you could contact me for help while you are encouraged to solve them your own first.","title":"Demo"}]}